{"version":3,"sources":["components/letter-rack/tile/index.tsx","constants/index.ts","components/letter-rack/index.tsx","components/hangman/index.tsx","components/question/index.tsx","components/answer/word/letter/index.tsx","components/answer/word/index.tsx","components/answer/index.tsx","components/modal/index.tsx","components/game-over/index.tsx","utils/index.tsx","custom-hooks/index.tsx","components/game/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["LetterTile","disabled","letter","handleLetterTileClick","react_default","a","createElement","className","data-picked","type","onClick","KEYS","split","ALPHABET","PUZZLES","question","answer","congrats","LetterRack","pickLetter","pickedLetters","map","letter_rack_tile","includes","toUpperCase","key","HangmanIcon","points","id","viewBox","xmlns","transform","d","cx","cy","r","strokeLinejoin","Question","phrase","AnswerLetter","show","AnswerWord","word","letters","i","answer_word_letter","Answer","words","components_answer_word","Modal","children","modalRoot","document","getElementById","ReactDOM","createPortal","GameOver","gameOverMessage","lostGame","restart","startNewPuzzle","buttonRef","useRef","title","btnText","ref","removeLetterFromString","replace","RegExp","arrayWithIndex","length","Array","v","usePuzzle","puzzle","_useState","useState","drop","_useState2","Object","slicedToArray","puzzlesLeft","setPuzzlesLeft","current","next","max","Math","floor","random","getRandomInt","remove","Game","_usePuzzle","_usePuzzle2","getNewPuzzle","setGameOverMessage","_useState3","_useState4","setPoints","_useState5","_useState6","setPickedLetters","useEffect","pipe","reduce","trim","str","equals","answerCorrect","pickedUCLetter","append","callback","keysAllowed","handleEvent","e","window","addEventListener","removeEventListener","useKeyPress","ucLetter","components_hangman","components_question","components_answer","components_letter_rack","components_modal","game_over","App","components_game","Boolean","location","hostname","match","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2bf0c18.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst LetterTile = ({\n  disabled,\n  letter,\n  handleLetterTileClick,\n}: {\n  disabled: boolean;\n  letter: string;\n  handleLetterTileClick: Function;\n}) => {\n  const handleClick = () => {\n    handleLetterTileClick(letter);\n  };\n\n  return (\n    <button\n      className=\"btn c-letter-tile\"\n      data-picked={disabled}\n      type=\"button\"\n      onClick={handleClick}\n    >\n      {letter}\n    </button>\n  );\n};\n\nLetterTile.propTypes = {\n  disabled: PropTypes.bool,\n  letter: PropTypes.string,\n  handleLetterTileClick: PropTypes.func,\n};\n\nexport default LetterTile;\n","const MAX_POINTS = 6;\nconst MSG_LOSE = 'Not quite!  Nice try.';\nconst KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789'.split('');\nconst ALPHABET = 'ABCDEfGHIJLKMNOPQRSTUVWXYZ'.split('');\n\nconst PUZZLES = [\n  {\n    question: \"What is a Kinaxis' primary product?\",\n    answer: 'Rapid Response',\n    congrats: 'You have done your research!!',\n  },\n  {\n    question: 'Fun Kinaxis cor value',\n    answer: 'Laugh Often',\n    congrats: 'A solid life lesson',\n  },\n  {\n    question: 'Finish these lyrics: \"Never gonna...\"',\n    answer: 'give you ug',\n    congrats: 'I am so sorry....',\n  },\n  {\n    question: 'What is the capital of Mexico?',\n    answer: 'Lorem Ipsum',\n    congrats: 'Congratulations!',\n  },\n  {\n    question: 'What venomous creature is common in the Southwestern United States?',\n    answer: 'Rattlesnake',\n    congrats: 'That\\'s right! Watch your step!',\n  }\n];\n\nexport { ALPHABET, MAX_POINTS, MSG_LOSE, KEYS, PUZZLES };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LetterTile from './tile';\nimport { ALPHABET } from '../../constants';\nimport './index.css';\n\nconst LetterRack = ({\n  pickLetter,\n  pickedLetters,\n}: {\n  pickLetter: Function;\n  pickedLetters: string[];\n}) => (\n    <div className=\"c-letter-rack\">\n      {ALPHABET.map(letter => (\n        <LetterTile\n          handleLetterTileClick={pickLetter}\n          letter={letter}\n          disabled={pickedLetters.includes(letter.toUpperCase())}\n          key={letter}\n        />\n      ))}\n    </div>\n  );\n\nLetterRack.propTypes = {\n  pickLetter: PropTypes.func,\n  pickedLetters: PropTypes.array,\n};\n\nexport default LetterRack;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst HangmanIcon = ({ points }: { points: number }) => (\n  <svg\n    id=\"hangman-icon\"\n    viewBox=\"0 0 257 252\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g id=\"stand\" transform=\"translate(2, 2)\">\n      <path d=\"M204.5,44.5 L204.5,1.5\" id=\"Line\" />\n      <path d=\"M203.5,1.5 L90.5,1.5\" id=\"Line-2\" />\n      <path d=\"M90.5,1.5 L90.5,245.502049\" id=\"Line-5\" />\n      <path d=\"M0.5,246.5 L183.502732,246.5\" id=\"Line-6\" />\n    </g>\n    {points > 0 && <circle cx=\"206\" cy=\"72\" r=\"25\" />}\n    {points > 1 && <path d=\"M206.5,97.5 L206.5,153.5\" />}\n    {points > 2 && <path d=\"M205.5,117.5 L157.5,104.5\" />}\n    {points > 3 && (\n      <path\n        d=\"M254.5,117.5 L206.5,104.5\"\n        transform=\"translate(230.5, 111) scale(-1, 1) translate(-230.5, -111) \"\n      />\n    )}\n    {points > 4 && (\n      <g id=\"left-leg\" transform=\"translate(162, 153)\">\n        <path d=\"M44.5,0.5 L10.5,51.5\" strokeLinejoin=\"round\" />\n        <path d=\"M10.5,51.5 L0.5,44.5\" />\n      </g>\n    )}\n    {points > 5 && (\n      <g transform=\"translate(206, 153)\">\n        <path\n          d=\"M34.5,0.5 L0.5,51.5\"\n          transform=\"translate(17.5, 26) scale(-1, 1) translate(-17, -26) \"\n        />\n      </g>\n    )}\n  </svg>\n);\n\nHangmanIcon.propTypes = {\n  points: PropTypes.number,\n};\n\nexport default HangmanIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst Question = ({ phrase }: { phrase: string }) => (\n  <div className=\"c-question\">\n    <span>{phrase}</span>\n  </div>\n);\n\nQuestion.propTypes = {\n  phrase: PropTypes.string.isRequired,\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst AnswerLetter = ({ letter, show }: { letter: string; show: boolean }) => (\n  <span className=\"c-answer-letter\">{show && letter}</span>\n);\n\nAnswerLetter.propTypes = {\n  letter: PropTypes.string,\n  show: PropTypes.bool,\n};\n\nexport default AnswerLetter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswerLetter from './letter';\nimport './index.css';\n\nconst AnswerWord = ({\n  pickedLetters,\n  word,\n}: {\n  pickedLetters: string[];\n  word: string;\n}) => {\n  const letters = word.split('');\n\n  return (\n    <div className=\"c-answer-word\">\n      {letters.map((letter, i) => (\n        <AnswerLetter\n          key={i}\n          letter={letter}\n          show={pickedLetters.includes(letter)}\n        />\n      ))}\n    </div>\n  );\n};\n\nAnswerWord.propTypes = {\n  pickedLetters: PropTypes.array.isRequired,\n  word: PropTypes.string.isRequired,\n};\n\nexport default AnswerWord;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswerWord from './word';\nimport './index.css';\n\nconst Answer = ({\n  phrase,\n  pickedLetters,\n}: {\n  phrase: string;\n  pickedLetters: string[];\n}) => {\n  const words = phrase.split(' ');\n\n  return (\n    <div className=\"c-answer\">\n      {words.map((word, i) => (\n        <AnswerWord key={i} word={word} pickedLetters={pickedLetters} />\n      ))}\n    </div>\n  );\n};\n\nAnswer.propTypes = {\n  phrase: PropTypes.string,\n  pickedLetters: PropTypes.array,\n};\n\nexport default Answer;\n","import React, { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Modal = ({ children }: { children: Element | ReactElement }) => {\n  const modalRoot = document.getElementById('modal-root');\n  return (\n    modalRoot &&\n    ReactDOM.createPortal(\n      <div>\n        <div className=\"c-dimmer\" />\n        <div className=\"c-modal\">{children}</div>\n      </div>,\n      modalRoot\n    )\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nconst GameOver = ({\n  gameOverMessage,\n  lostGame,\n  restart,\n  startNewPuzzle,\n}: {\n  gameOverMessage: string;\n  lostGame: boolean;\n  restart: React.MouseEventHandler;\n  startNewPuzzle: React.MouseEventHandler;\n}) => {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  // Commented out below to create bug, button will not be accessible\n  // useEffect(() => {\n  //   buttonRef.current && buttonRef.current.focus();\n  // }, []);\n  const title = lostGame ? 'GAME OVER!!' : 'YOU WIN!!';\n  const btnText = lostGame ? 'Try Again' : 'New Puzzle';\n\n  return (\n    <div className=\"c-game-over\">\n      <span className=\"c-game-over-title\">{title}</span>\n      <span className=\"c-game-over-message\">{gameOverMessage}</span>\n      <div className=\"c-game-over-buttons\">\n        <button\n          className=\"btn\"\n          onClick={lostGame ? restart : startNewPuzzle}\n          ref={buttonRef}\n          type=\"button\"\n        >\n          {btnText}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nGameOver.propTypes = {\n  gameOverMessage: PropTypes.string.isRequired,\n  lostGame: PropTypes.bool.isRequired,\n  restart: PropTypes.func.isRequired,\n  startNewPuzzle: PropTypes.func.isRequired,\n};\n\nexport default GameOver;\n","import { replace } from 'ramda';\n\nconst removeLetterFromString = (phrase: string, letter: string) =>\n  replace(new RegExp(letter, 'ig'), '', phrase);\n\nconst getRandomInt = (max: number) => Math.floor(Math.random() * max);\n\nconst arrayWithIndex = (length: number) => [...Array(length)].map((v, i) => i);\n\nexport { arrayWithIndex, getRandomInt, removeLetterFromString };\n","import { useEffect, useRef, useState } from 'react';\nimport { drop, remove } from 'ramda';\nimport { arrayWithIndex, getRandomInt } from '../utils';\nimport { PUZZLES } from '../constants';\n\nconst useKeyPress = (callback: Function, keysAllowed: string[]) => {\n  const handleEvent = (e: KeyboardEvent) => {\n    if (keysAllowed.includes(e.key)) {\n      callback(e.key);\n    }\n  };\n  useEffect(() => {\n    window.document.addEventListener('keyup', handleEvent);\n    return () => {\n      window.document.removeEventListener('keyup', handleEvent);\n    };\n  });\n};\n\ninterface Puzzle {\n  question: string;\n  answer: string;\n  congrats: string;\n}\n\ntype usePuzzleReturn = [Puzzle, () => void];\n\nconst usePuzzle = (): usePuzzleReturn => {\n  const puzzle = useRef(PUZZLES[0]);\n  const [puzzlesLeft, setPuzzlesLeft] = useState(\n    drop(1, [...arrayWithIndex(PUZZLES.length)])\n  );\n\n  const newPuzzle = () => {\n    const next = getRandomInt(puzzlesLeft.length);\n    puzzle.current = PUZZLES[puzzlesLeft[next]];\n    if (puzzlesLeft.length > 1) {\n      setPuzzlesLeft(remove(next, 1, puzzlesLeft));\n    } else {\n      setPuzzlesLeft([...arrayWithIndex(PUZZLES.length)]);\n    }\n  };\n\n  return [puzzle.current, newPuzzle];\n};\n\nexport { useKeyPress, usePuzzle };\n","import React, { useEffect, useState } from 'react';\nimport { append, equals, pipe, reduce, trim } from 'ramda';\nimport LetterRack from '../letter-rack';\nimport HangmanIcon from '../hangman';\nimport Question from '../question';\nimport Answer from '../answer';\nimport Modal from '../modal';\nimport GameOver from '../game-over';\nimport { useKeyPress, usePuzzle } from '../../custom-hooks';\nimport { MAX_POINTS, MSG_LOSE, KEYS } from '../../constants';\nimport { removeLetterFromString } from '../../utils';\nimport './index.css';\n\nconst answerCorrect = (phrase: string) =>\n  pipe(\n    reduce(removeLetterFromString, phrase),\n    trim,\n    str => str.length,\n    equals(0)\n  );\n\nconst Game = () => {\n  const [puzzle, getNewPuzzle] = usePuzzle();\n  const [gameOverMessage, setGameOverMessage] = useState<string>('');\n  const [points, setPoints] = useState<number>(0);\n  const [pickedLetters, setPickedLetters] = useState<string[]>([]);\n  useEffect(() => {\n    if (answerCorrect(puzzle.answer.toUpperCase())(pickedLetters)) {\n      setGameOverMessage(puzzle.congrats);\n    } else if (points === MAX_POINTS) {\n      setGameOverMessage(MSG_LOSE);\n    }\n  }, [pickedLetters, points, puzzle]);\n\n  const pickLetter = (letter: string) => {\n    const ucLetter = letter.toUpperCase();\n    let pickedUCLetter = ucLetter;\n    if (pickedUCLetter === \"S\") {\n      pickedUCLetter = \"T\";\n    } else if (pickedUCLetter === \"T\") {\n      pickedUCLetter = \"S\";\n    }\n    if (!puzzle.answer.toUpperCase().includes(pickedUCLetter)) {\n      setPoints(points + 1);\n    }\n    setPickedLetters(append(pickedUCLetter, pickedLetters));\n  };\n\n  const handleKeyboardInput = (letter: string) => {\n    if (gameOverMessage.length) return;\n    const ucLetter = letter.toUpperCase() === \"E\" ? \"G\" : letter.toUpperCase();\n    if (!pickedLetters.includes(ucLetter)) {\n      pickLetter(ucLetter);\n    }\n  };\n  useKeyPress(handleKeyboardInput, KEYS);\n\n  const restart = () => {\n    setPoints(1);\n    setPickedLetters([]);\n    setGameOverMessage('');\n  };\n\n  const startNewPuzzle = () => {\n    restart();\n    getNewPuzzle();\n  };\n\n  const lostGame = points === MAX_POINTS;\n\n  return (\n    <div className=\"c-game\">\n      <h1 className=\"c-title\">Kinaxis Hangman!</h1>\n      <HangmanIcon points={points} />\n      <Question phrase={puzzle.question} />\n      <Answer\n        phrase={puzzle.answer.toUpperCase()}\n        pickedLetters={pickedLetters}\n      />\n      <LetterRack pickLetter={pickLetter} pickedLetters={pickedLetters} />\n      {gameOverMessage.length > 0 && (\n        <Modal>\n          <GameOver\n            gameOverMessage={gameOverMessage}\n            lostGame={lostGame}\n            restart={restart}\n            startNewPuzzle={startNewPuzzle}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/game';\nimport './App.css';\n\nconst App = () => (\n  <div id=\"modal-root\" className=\"App\">\n    <Game />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}